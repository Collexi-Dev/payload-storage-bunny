{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type {\n  Adapter,\n  PluginOptions as CloudStoragePluginOptions,\n  CollectionOptions,\n  GeneratedAdapter,\n} from '@payloadcms/plugin-cloud-storage/types'\nimport type { Config, Field } from 'payload'\n\nimport { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'\nimport { posix } from 'node:path'\n\nimport type { AdminThumbnailOptions, BunnyPlugin, BunnyStorageOptions } from './types.js'\n\nimport { getGenerateURL } from './generateURL.js'\nimport { getHandleDelete } from './handleDelete.js'\nimport { getHandleUpload } from './handleUpload.js'\nimport { getStaticHandler } from './staticHandler.js'\nimport { isImage } from './utils.js'\n\nexport const bunnyStorage: BunnyPlugin =\n  (bunnyStorageOptions: BunnyStorageOptions) =>\n  (incomingConfig: Config): Config => {\n    if (bunnyStorageOptions.enabled === false) {\n      return incomingConfig\n    }\n\n    const adapter = bunnyInternal(bunnyStorageOptions)\n\n    const collectionsWithAdapter: CloudStoragePluginOptions['collections'] = Object.entries(\n      bunnyStorageOptions.collections,\n    ).reduce(\n      (acc, [slug, collOptions]) => ({\n        ...acc,\n        [slug]: {\n          ...(collOptions === true ? {} : collOptions),\n          adapter,\n        },\n      }),\n      {} as Record<string, CollectionOptions>,\n    )\n\n    const config: Config = {\n      ...incomingConfig,\n      collections: (incomingConfig.collections || []).map((collection) => {\n        if (!collectionsWithAdapter[collection.slug]) {\n          return collection\n        }\n\n        return {\n          ...collection,\n          upload: {\n            ...(typeof collection.upload === 'object' ? collection.upload : {}),\n            adminThumbnail:\n              bunnyStorageOptions.options.adminThumbnail !== undefined\n                ? ({ doc }: { doc: Record<string, unknown> }): null | string => {\n                    const { adminThumbnail = true, storage, stream } = bunnyStorageOptions.options\n                    const hasUpdatedAt = doc.updatedAt !== null\n                    const timestampQuery = hasUpdatedAt\n                      ? `t=${Date.parse(doc.updatedAt as string)}`\n                      : ''\n\n                    if (stream && doc.bunnyVideoId && typeof doc.bunnyVideoId === 'string') {\n                      const baseUrl = `https://${stream.hostname}/${doc.bunnyVideoId}/thumbnail.jpg`\n                      return timestampQuery ? `${baseUrl}?${timestampQuery}` : baseUrl\n                    }\n\n                    if (doc.mimeType && isImage(doc.mimeType as string)) {\n                      const filename = doc.filename as string\n                      const prefix = (doc.prefix as string) || ''\n                      const baseUrl = `https://${storage.hostname}/${posix.join(prefix, filename)}`\n\n                      if (adminThumbnail === true) {\n                        return timestampQuery ? `${baseUrl}?${timestampQuery}` : baseUrl\n                      }\n\n                      const options = adminThumbnail as AdminThumbnailOptions\n                      const queryParams = new URLSearchParams(options.queryParams || {})\n                      if (options.appendTimestamp && hasUpdatedAt) {\n                        queryParams.append('t', Date.parse(doc.updatedAt as string).toString())\n                      }\n\n                      const queryString = queryParams.toString()\n                      return queryString ? `${baseUrl}?${queryString}` : baseUrl\n                    }\n\n                    return null\n                  }\n                : undefined,\n            disableLocalStorage: true,\n          },\n        }\n      }),\n    }\n\n    return cloudStoragePlugin({\n      collections: collectionsWithAdapter,\n    })(config)\n  }\n\nconst bunnyInternal = ({ options }: BunnyStorageOptions): Adapter => {\n  const fields: Field[] = options.stream\n    ? [\n        {\n          name: 'bunnyVideoId',\n          type: 'text',\n          admin: {\n            disabled: true,\n            hidden: true,\n          },\n        },\n      ]\n    : []\n\n  return ({ collection, prefix }): GeneratedAdapter => {\n    return {\n      name: 'bunny',\n      fields,\n      generateURL: getGenerateURL(options),\n      handleDelete: getHandleDelete(options),\n      handleUpload: getHandleUpload({ ...options, prefix }),\n      staticHandler: getStaticHandler({ ...options, collection, prefix }),\n    }\n  }\n}\n"],"names":["cloudStoragePlugin","posix","getGenerateURL","getHandleDelete","getHandleUpload","getStaticHandler","isImage","bunnyStorage","bunnyStorageOptions","incomingConfig","enabled","adapter","bunnyInternal","collectionsWithAdapter","Object","entries","collections","reduce","acc","slug","collOptions","config","map","collection","upload","adminThumbnail","options","undefined","doc","storage","stream","hasUpdatedAt","updatedAt","timestampQuery","Date","parse","bunnyVideoId","baseUrl","hostname","mimeType","filename","prefix","join","queryParams","URLSearchParams","appendTimestamp","append","toString","queryString","disableLocalStorage","fields","name","type","admin","disabled","hidden","generateURL","handleDelete","handleUpload","staticHandler"],"mappings":"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"}